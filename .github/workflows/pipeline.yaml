name: Java CI/CD with Gradle and EKS

on:
  push:
    branches: [ "main" ]

env:
  EKS_CLUSTER_NAME: eks-cluster
  AWS_REGION: us-east-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew build --no-daemon -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
          RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Atualiza imagem no YAML"
          sed -i.bak "s|image: .*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/app-deployment.yaml

          echo "Cria/atualiza ConfigMap com a URL do banco"
          kubectl create configmap tech-challenge-config \
            --from-literal=SPRING_DATASOURCE_URL=jdbc:postgresql://$RDS_HOSTNAME:5432/postgres \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Cria/atualiza Secret com usu√°rio e senha do banco"
          kubectl create secret generic tech-challenge-secret \
            --from-literal=SPRING_DATASOURCE_USERNAME=$DB_USERNAME \
            --from-literal=SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Aplica deployment e service"
          kubectl apply -f k8s/app-deployment.yaml
          kubectl apply -f k8s/app-service.yaml
      
